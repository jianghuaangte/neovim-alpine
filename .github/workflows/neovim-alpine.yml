name: Build Neovim Offline Package for Multiple Architectures

on:
  schedule:
    - cron: '0 18 * * *'    # UTC 18:00 = 北京时间 2:00
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    container: alpine:edge

    env:
      VERSION: edge

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install necessary tools
        run: |
          apk update
          apk add curl tar git bash

      - name: Set ARCH environment variable
        run: echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Configure Alpine edge repositories
        run: |
          echo "https://dl-cdn.alpinelinux.org/alpine/edge/main" > /etc/apk/repositories
          echo "https://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
          apk update

      - name: Fetch Neovim APKs and dependencies for $ARCH
        run: |
          mkdir -p neovim-${ARCH}
          cd neovim-${ARCH}
          apk fetch --recursive --output . neovim
          cd ..

      - name: Install Neovim locally to get version ($ARCH)
        run: |
          apk add --allow-untrusted --no-network --cache-dir ./neovim-${ARCH} ./neovim-${ARCH}/*.apk

      - name: Get Neovim version
        id: get_version
        run: |
          NVIM_VER=$(nvim --version | head -1 | awk '{print $2}')
          echo "version=$NVIM_VER" >> $GITHUB_OUTPUT

      - name: Create Git Tag and Push (only on x86_64)
        if: matrix.arch == 'x86_64'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd $GITHUB_WORKSPACE
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          TAG="v${{ steps.get_version.outputs.version }}"
          # 判断 Tag 是否已存在，避免重复推送错误
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Package offline tarball for $ARCH
        run: |
          tar czf neovim-${ARCH}-v${{ steps.get_version.outputs.version }}.tar.gz neovim-${ARCH}

      - name: Create GitHub Release (only once on x86_64)
        if: matrix.arch == 'x86_64'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          release_name: "Neovim v${{ steps.get_version.outputs.version }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset ($ARCH)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./neovim-${ARCH}-v${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: neovim-${ARCH}-v${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
